[Tests]
  [channel_flow_2d]
    type = HDF5Diff
    input = channel2D.i
    hdf5diff = channel2D.h5
    requirement = 'The system shall be able to solve a 2D channel flow problem.'
    design = 'LBMStream.md'
    abs_tol = 1e-10
    compute_devices = 'cpu cuda mps'
  []
  [channel_flow_3d]
    type = HDF5Diff
    input = channel3D.i
    hdf5diff = channel3D.h5
    requirement = 'The system shall be able to solve a 3D channel flow problem.'
    design = 'LBMD3Q19.md'
    abs_tol = 1e-10
    compute_devices = 'cpu cuda mps'
  []
  [isotropic_mrt]
    type = HDF5Diff
    input = isotropic_stencil_mrt.i
    hdf5diff = isotropic_stencil_mrt.h5
    requirement = 'The system shall be able to solve a 3D channel flow problem with D3Q27 stencil and MRT collision.'
    design = 'LBMD3Q27.md'
    abs_tol = 1e-10
    compute_devices = 'cpu cuda mps'
  []
  [flow_around_obstacle]
    type = HDF5Diff
    input = obstacle.i
    hdf5diff = obstacle.h5
    requirement = 'The system shall be able to load tensor from h5 file and run LBMIterations.'
    design = 'LBMTensorBuffer.md'
    abs_tol = 1e-10
    compute_devices = 'cpu cuda mps'
  []
  [phase-field]
    type = HDF5Diff
    input = phase.i
    hdf5diff = phase.h5
    requirement = 'The system shall be able to solve Cahn-Hillard equation for phase evolution from random initial condition using LBM.'
    design = 'LBMComputeChemicalPotential.md'
    abs_tol = 1e-10
    compute_devices = 'cpu cuda mps'
  []
  [mass_heat_advan_bc]
    type = HDF5Diff
    input = advan_bc.i
    hdf5diff = advan_bc.h5
    requirement = 'The system shall be able to solve coupled heat and mass transfer with advanced boundary conditions using LBM.'
    design = 'LBMDirichletWallBC.md'
    abs_tol = 1e-10
    compute_devices = 'cpu cuda mps'
  []
  [dirichlet_box]
    type = HDF5Diff
    input = dirichlet_box.i
    hdf5diff = dirichlet_box.h5
    requirement = 'The system shall be able to apply Dirichlet boundary conditions at the macroscopic level.'
    design = 'LBMMacroscopicDirichletBC.md'
    abs_tol = 1e-10
    compute_devices = 'cpu cuda mps'
  []
  [neumann_box]
    type = HDF5Diff
    input = neumann_box.i
    hdf5diff = neumann_box.h5
    requirement = 'The system shall be able to apply Neumann boundary conditions at the macroscopic level.'
    design = 'LBMMacroscopicNeumannBC.md'
    abs_tol = 1e-10
    compute_devices = 'cpu cuda mps'
  []
  [stacking]
    type = HDF5Diff
    input = stacking.i
    hdf5diff = stacking.h5
    requirement = 'The system shall be able to stack tensors to create vectorial tensors.'
    design = 'LBMStackTensors.md'
    abs_tol = 1e-10
    compute_devices = 'cpu cuda mps'
  []
  [vertical_density_bcs]
    type = HDF5Diff
    input = vertical_density_bcs.i
    hdf5diff = vertical_density_bcs.h5
    requirement = 'The system shall be able to apply microscopic density BC at every face.'
    design = 'LBMFixedZerothOrderBC.md'
    abs_tol = 1e-10
    compute_devices = 'cpu cuda mps'
  []
  [vertical_velocity_bcs]
    type = HDF5Diff
    input = vertical_velocity_bcs.i
    hdf5diff = vertical_velocity_bcs.h5
    requirement = 'The system shall be able to apply microscopic velocity BC at every face.'
    design = 'LBMFixedFirstOrderBC.md'
    abs_tol = 1e-10
    compute_devices = 'cpu cuda mps'
  []
  [horizontal_mixed_bcs_d2q9]
    type = HDF5Diff
    input = horizontal_mixed_bcs_d2q9.i
    hdf5diff = horizontal_mixed_bcs_d2q9.h5
    requirement = 'The system shall be able to apply mixture of microscopic density and velocity BC.'
    design = 'LBMFixedFirstOrderBC.md LBMFixedZerothOrderBC.md'
    abs_tol = 1e-10
    compute_devices = 'cpu cuda mps'
  []
  [horizontal_mixed_bcs_d2q9_reverse]
    type = HDF5Diff
    input = horizontal_mixed_bcs_d2q9_reverse.i
    hdf5diff = horizontal_mixed_bcs_d2q9_reverse.h5
    requirement = 'The system shall be able to apply mixture of microscopic density and zero gradient BC.'
    design = 'LBMFixedZerothOrderBC.md LBMMicroscopicZeroGradientBC'
    abs_tol = 1e-10
    compute_devices = 'cpu cuda mps'
  []
  [mixed_bcs_d3q19]
    type = HDF5Diff
    input = mixed_bcs_d3q19.i
    hdf5diff = mixed_bcs_d3q19.h5
    requirement = 'The system shall be able to apply mixture of microscopic density and velocity BC for D3Q19 stencil.'
    design = 'LBMFixedFirstOrderBC.md LBMFixedZerothOrderBC.md LBMD3Q19.md'
    abs_tol = 1e-10
    compute_devices = 'cpu cuda mps'
  []
  [mixed_bcs_d3q19_reverse]
    type = HDF5Diff
    input = mixed_bcs_d3q19_reverse.i
    hdf5diff = mixed_bcs_d3q19_reverse.h5
    requirement = 'The system shall be able to apply mixture of microscopic density and velocity BC for D3Q19 stencil.'
    design = 'LBMFixedFirstOrderBC.md LBMFixedZerothOrderBC.md LBMD3Q19.md'
    abs_tol = 1e-10
    compute_devices = 'cpu cuda mps'
  []
  [mixed_bcs_d3q27]
    type = HDF5Diff
    input = mixed_bcs_d3q27.i
    hdf5diff = mixed_bcs_d3q27.h5
    requirement = 'The system shall be able to apply mixture of microscopic density and velocity BC for D3Q27 stencil.'
    design = 'LBMFixedFirstOrderBC.md LBMFixedZerothOrderBC.md LBMD3Q27.md'
    abs_tol = 1e-10
    compute_devices = 'cpu cuda mps'
  []
  [mixed_bcs_d3q27_reverse]
    type = HDF5Diff
    input = mixed_bcs_d3q27_reverse.i
    hdf5diff = mixed_bcs_d3q27_reverse.h5
    requirement = 'The system shall be able to apply mixture of microscopic density and velocity BC for D3Q27 stencil.'
    design = 'LBMFixedFirstOrderBC.md LBMFixedZerothOrderBC.md LBMD3Q27.md'
    abs_tol = 1e-10
    compute_devices = 'cpu cuda mps'
  []
  [smagorinsky_mrt]
    type = HDF5Diff
    input = smagorinsky_mrt.i
    hdf5diff = smagorinsky_mrt.h5
    requirement = 'The system shall be able to solve Smagorinsky MRT collision.'
    design = 'LBMCollisionDynamics.md'
    abs_tol = 1e-10
    compute_devices = 'cpu cuda mps'
  []
[]
