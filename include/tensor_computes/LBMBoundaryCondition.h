/**********************************************************************/
/*                    DO NOT MODIFY THIS HEADER                       */
/*             Swift, a Fourier spectral solver for MOOSE             */
/*                                                                    */
/*            Copyright 2024 Battelle Energy Alliance, LLC            */
/*                        ALL RIGHTS RESERVED                         */
/**********************************************************************/

#pragma once

#include "LatticeBoltzmannOperator.h"
#include "MooseEnum.h"

/**
 * LBMBoundaryCondition object
 */
class LBMBoundaryCondition : public LatticeBoltzmannOperator
{
public:
  static InputParameters validParams();

  LBMBoundaryCondition(const InputParameters & parameters);

    /**
   * Conventions:
   * Left boundary is at x = 0
   * Right is at x = Nx
   * Front is at y = 0
   * Back is at y = Ny
   * Bottom is at z = 0
   * Top is at z = Nz
   * 
   * Wall boundary refers to any obstacles in the domain
   * It is entirely possible to put an obstacle at left, right, front, back, top or 
   * bottom boundary and use wall boundary to replace any of them.
   */

  virtual void topBoundary() = 0;
  virtual void bottomBoundary() = 0;
  virtual void leftBoundary() = 0;
  virtual void rightBoundary() = 0;
  virtual void frontBoundary() = 0;
  virtual void backBoundary() = 0;
  virtual void wallBoundary() {};

  virtual void buildBoundaryIndices();
  virtual void computeBuffer() override;

protected:

  enum class Boundary
  {
    top,
    bottom,
    left,
    right,
    front,
    back,
    wall
  } _boundary;

  torch::Tensor _boundary_indices;

  // Pre-calculated table for complex LBM boundary conditions
  const torch::Tensor _if_stream = torch::tensor({1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1,
    1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1
    , 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1}, MooseTensor::intTensorOptions());

  const torch::Tensor _icsr = torch::tensor({1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 2, 3, 2, 2, 7, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 5, 5, 2, 2, 8, 2, 3, 3, 2, 3, 3, 2, 2, 5, 5, 2, 5, 5, 2, 2, 4, 4, 2, 4, 4, 2, 3, 2, 3, 3, 3, 2, 3, 3, 3, 3, 3,
    9, 3, 3, 3, 2, 2, 3, 3, 3, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 8, 4, 4, 5, 5, 3, 3, 3, 3, 3, 3, 3, 5,
    2, 3, 3, 5, 2, 4, 4, 4, 4, 4, 4, 4, 3, 5, 5, 2, 3, 3, 5, 5, 6, 9, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 2, 5, 5, 2, 2, 5, 5, 4, 3, 4, 3, 5, 5, 5, 2, 5, 5, 5, 2, 2, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 4, 4, 3, 4,
    4, 7, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 6, 6, 8,
    8, 9, 9, 4, 6, 6, 6, 6, 6, 6, 2, 6, 8, 8, 5, 8, 8, 9, 9, 7, 7, 6, 7, 7, 8, 7, 9, 6, 7, 7, 9, 6, 7, 7, 7, 7, 5, 7, 7, 7, 9, 9, 6,
    7, 7, 9, 9, 3, 2, 6, 4, 7, 7, 8, 8, 3, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 6, 8, 9, 6, 6, 8, 9, 8, 7,
    8, 7, 4, 5, 6, 6, 8, 8, 9, 6, 6, 8, 8, 2, 5, 9, 3, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8, 4, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
    9, 9, 9, 9, 9, 9, 9, 7, 6, 7, 6, 9, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 9, 9, 2, 9, 9, 9, 9, 5, 9, 7, 7, 6, 7, 7, 3, 6, 9, 9, 2, 9,
    9, 9, 9, 8, 8, 7, 8, 8, 9}, MooseTensor::intTensorOptions());

  const torch::Tensor _all_boundary_types = torch::tensor({31, 55, 63, 91, 95, 119, 127, 217, 219, 221, 223, 247 ,253, 255, 287, 310,
    311, 319, 347, 351, 374, 375, 79, 382, 383, 415, 436, 437, 438, 439, 445, 447, 472, 473, 475, 476, 477, 478, 479, 496, 497,
    499, 500, 501, 502, 503, 504, 505 ,507 ,508 ,509,510}, MooseTensor::intTensorOptions());

  const torch::Tensor _x_norms = torch::tensor({0.707106781186547, 0.707106781186547, 1.0,0.707106781186547, 0.707106781186547, 0.707106781186547, 
    1.0,-0.707106781186547, 0.0, -0.707106781186547, 0.0, 0.447213595499958, -0.894427190999916, 0.707106781186547, 0.707106781186547, 0.707106781186547,
    0.707106781186547, 1.0,0.707106781186547, 0.707106781186547, 0.707106781186547, 0.707106781186547, 0.894427190999916, 0.894427190999916, 1.0,
    0.447213595499958, -0.707106781186547, -0.707106781186547, 0.0, 0.0, -0.894427190999916, 0.707106781186547, -0.707106781186547, -0.707106781186547, 
    0.0, -0.707106781186547, -0.707106781186547, -0.447213595499958, 0.0, -0.707106781186547, -0.707106781186547, -0.447213595499958, -0.707106781186547, 
    -0.707106781186547, 0.0, 0.0, -1.0,-1.0,-0.707106781186547, -1.0,-1.0,-0.707106781186547},
    MooseTensor::floatTensorOptions());
  
  const torch::Tensor _y_norms = torch::tensor({0.707106781186547, -0.707106781186547, 0.0, 0.707106781186547, 0.707106781186547, -0.707106781186547, 
    0.0, 0.707106781186547, 1.0,0.707106781186547, 1.0,-0.894427190999916, 0.447213595499958, 0.707106781186547, 0.707106781186547, -0.707106781186547, 
    -0.707106781186547, 0.0, 0.707106781186547, 0.707106781186547, -0.707106781186547, -0.707106781186547, 0.447213595499958, -0.447213595499958, 0.0, 
    0.894427190999916, -0.707106781186547, -0.707106781186547, -1.0,-1.0,-0.447213595499958, -0.707106781186547, 0.707106781186547, 0.707106781186547, 
    1.0,0.707106781186547, 0.707106781186547, 0.894427190999916, 1.0,-0.707106781186547, -0.707106781186547, -0.894427190999916, -0.707106781186547, 
    -0.707106781186547, -1.0,-1.0, 0.0, 0.0, 0.707106781186547, 0.0, 0.0, -0.707106781186547},
    MooseTensor::floatTensorOptions());
};
